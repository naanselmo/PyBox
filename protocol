Pacotes:

-> login 
	-> username
	-> filesInClient (name, path, last modified, owner)

-> fileChanged
	-> file (name, path, last modified, owner)

-> requestFile
	-> file (name, path, owner)

sendFile
	-> file (name, path, content, last modified, owner)

Traducao:
-> json
-> nomePacote|field1|field2|field3|...|fieldN

Funcionamento:

Inicial
-> Client liga ao servidor, mandando um pacote de login, onde especifica o seu username e todos os ficheiros que tem.

-> Servidor compara os ficheiros do cliente com os que tem. Se não tiver os ficheiros que o cliente tem, então faz um 
requestFile ao cliente, especificando qual o ficheiro que não tem. O cliente por sua vez, recebe o request e envia o
ficheiro usando o pacote sendFile.
Se o cliente não tem ficheiros que o servidor tem, o servidor manda o ficheiro atravês do pacote sendFile.

Resto do programa
-> Cliente verifica sempre changes localmente (data de modificacao). Quando detetada uma change o cliente manda um pacote
fileChanged, com a informação do ficheiro mudado. O servidor ao receber o pacote, verifica se tem ou não a ultima versão.
Se não tiver, pede o ficheiro ao cliente atravês do pacode requestFile. Se tem a ultima versão ignora o pacote.

-> Caso seja necessario implementar multiplos clientes com o mesmo servidor, basta fazer com que o servidor quando recebe um ficheiro,
manda o mesmo para todas as sockets que teem esse mesmo utilizador ligado (necessario manter um map de username->sockets),
excepto ao que enviou. 